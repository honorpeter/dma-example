/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "platform.h"
#include "xparameters.h"
//#include "xil_types.h"
//#include "xil_io.h"
//#include "xil_exception.h"
#include "xintc_l.h"
#include "stdlib.h"

#define u32 unsigned int
static u32 source_mem1[16];
static u32 dest_mem1[16];
static u32 source_mem2[16];
static u32 dest_mem2[16];
static u32 len = 16;
volatile static u32 first = 1;

#define INTC_BASE_ADDR 0x41200000

#define DDR_BASE_ADDR		0x80000000
#define CHECK_BIT(var,pos) ((var & (1<<pos)))

//The DMA registers Direct Register Mode
#define DMA_BASE_ADDR 0x41e00000
volatile u32 *MM2S_DMACR   	= (u32 *) (DMA_BASE_ADDR+ 0x00); //MM2S DMA Control register
volatile u32 *MM2S_DMASR   	= (u32 *) (DMA_BASE_ADDR+ 0x04); //MM2S DMA Status register
volatile u32 *MM2S_SA    	= (u32 *) (DMA_BASE_ADDR+ 0x18); //MM2S Source Address
volatile u32 *MM2S_LENGTH  	= (u32 *) (DMA_BASE_ADDR+ 0x28); //MM2S Transfer Length (Bytes)
volatile u32 *S2MM_DMACR   	= (u32 *) (DMA_BASE_ADDR+ 0x30); //S2MM DMA Control register
volatile u32 *S2MM_DMASR   	= (u32 *) (DMA_BASE_ADDR+ 0x34); //S2MM DMA Status register
volatile u32 *S2MM_DA    	= (u32 *) (DMA_BASE_ADDR+ 0x48); //S2MM Destination Address
volatile u32 *S2MM_LENGTH  	= (u32 *) (DMA_BASE_ADDR+ 0x58); //S2MM Buffer Length (Bytes)

void set_memory(u32 *addr, u32 length, u32 value){
	int i;
	u32 *ptr = (u32 *) addr;
	for(i = 0; i < length; i++){
		*ptr = value;
		ptr++;
	}
}

void print_memory(u32 *addr, u32 length){
	int i;
	u32 *ptr = (u32 *)addr;
	for(i = 0; i < length; i++){
		xil_printf("memory addr = %x with value = %x \n\r", ptr, *ptr);
		ptr++;
	}
}

void init_DMA_direct(){
	*MM2S_DMACR = 0x00000001; //enable the MM2S DMA
	*S2MM_DMACR = 0x00000001; //enable the S2MM DMA
	xil_printf("MM2S status is = %x S2MM status = %x\n\r",*MM2S_DMASR,*S2MM_DMASR); // print for debug purpose
}

void init_DMA_direct_int(){
	*MM2S_DMACR = 0x00005001; //enable the MM2S DMA
	*S2MM_DMACR = 0x00005001; //enable the S2MM DMA
	xil_printf("MM2S status is = %x S2MM status = %x\n\r",*MM2S_DMASR,*S2MM_DMASR); // print for debug purpose
}

void halt_DMA_direct(){
	*MM2S_DMACR = 0x00000000; //enable the MM2S DMA
	*S2MM_DMACR = 0x00000000; //enable the S2MM DMA
	xil_printf("MM2S status is = %x S2MM status = %x\n\r",*MM2S_DMASR,*S2MM_DMASR); // print for debug purpose
}

void dma_memcopy(u32 *saddr, u32 *daddr, u32 length) {
	*MM2S_SA = (u32)saddr;
	*S2MM_DA = (u32)daddr;

	*MM2S_LENGTH = length * sizeof(u32);
	*S2MM_LENGTH = length * sizeof(u32);
}

/* dma interrupt service routine */
void dma_int_handler(void *baseaddr_p) {
	volatile u32 mm2s = *MM2S_DMASR;
	volatile u32 s2mm = *S2MM_DMASR;


	*MM2S_DMASR = mm2s | 0x00001000; //enable the MM2S DMA
	*S2MM_DMASR = s2mm | 0x00001000;
	if (first) {
		xil_printf("First memory complete\n");
	    dma_memcopy(source_mem2, dest_mem2, len);
	    first = 0;
	}
	else {
		xil_printf("Second memory write complete\n");
		first = 2;
	}
}

int main()
{
    init_platform();
    microblaze_enable_interrupts();
    xil_printf("Starting DMA test...\n");

    /* Link the above interrupt handler to the UART module
    in the interrupt controller*/
    XIntc_RegisterHandler(XPAR_INTC_0_BASEADDR,XPAR_AXI_INTC_0_AXI_DMA_0_S2MM_INTROUT_INTR,
    		(XInterruptHandler)dma_int_handler,(void*)DMA_BASE_ADDR);
    XIntc_RegisterHandler(XPAR_INTC_0_BASEADDR,XPAR_AXI_INTC_0_AXI_DMA_0_MM2S_INTROUT_INTR,
    		(XInterruptHandler)dma_int_handler,(void*)DMA_BASE_ADDR);
    /* Enable the interrupt controller */
    XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);

    /* Enable uart interrupt in the interrupt controller */
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,XPAR_AXI_DMA_0_S2MM_INTROUT_MASK);
    XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,XPAR_AXI_DMA_0_MM2S_INTROUT_MASK);

    // set DDR memory
    u32 data = 0xdeadbeef;
    set_memory(source_mem1, len, data);
    set_memory(dest_mem1, len, 0);
    print_memory(source_mem1, len);
    u32 data2 = 0xbaadf00d;
    set_memory(source_mem2, len, data2);
    set_memory(dest_mem2, len, 0);
    print_memory(source_mem2, len);

    halt_DMA_direct();
    init_DMA_direct_int();
    xil_printf("%d\n", *S2MM_DMASR & (1 << 12));

    xil_printf("%d\n", *S2MM_DMASR & (1 << 12));
    while (first != 2) {

    }

    print_memory(dest_mem1, len);
    print_memory(dest_mem2, len);

    xil_printf("Finished DMA test...\n");
    cleanup_platform();
    return 0;
}
